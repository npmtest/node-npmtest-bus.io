{"/home/travis/build/npmtest/node-npmtest-bus.io/test.js":"/* istanbul instrument in package npmtest_bus_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bus.io/lib.npmtest_bus.io.js":"/* istanbul instrument in package npmtest_bus_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bus_io = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bus_io = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bus.io/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bus.io && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bus_io */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bus_io\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bus_io.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bus_io.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bus_io.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bus_io.__dirname + '/lib.npmtest_bus_io.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io/lib/index.js":"var util = require('util')\n  , slice = Array.prototype.slice\n  , events = require('events')\n  , http = require('http')\n  , debug = require('debug')('bus.io:server')\n  , sio = require('socket.io')\n  , common = require('bus.io-common')\n  , Message = common.Message\n  , Builder = common.Builder\n  , Messages = require('bus.io-messages')\n  , Exchange = require('bus.io-exchange')\n  , Receiver = require('bus.io-receiver')\n  ;\n\nvar clientVersion = require('bus.io-client/package.json').version;\nvar clientSource = require('fs').readFileSync(require.resolve('bus.io-client/bus.io.js'), 'utf8');\n\nexports = module.exports = Server;\nexports.version = require('./../package.json').version\nexports.Server = Server;\nexports.Exchange = Exchange;\nexports.Messages = Messages;\n\n/*\n * The global server isntance\n */\n\nvar server = null;\n\n/**\n * The bus\n *\n * @param {object} io socket.io instance or http.Server\n */\n\nfunction Server (a, b) {\n\n  if (!(this instanceof Server)) {\n    if (!arguments.length && server) return server;\n    var instance = new Server(a, b);\n    if (!server) server = instance;\n    return instance;\n  }\n\n\n  debug('new server', a, b);\n\n  var self = this;\n\n  events.EventEmitter.call(this);\n\n  /**\n   * Called when we are supposed to publish the message. this is bound to a \n   * Builder instance an Receiver instances\n   *\n   * @api private\n   * @param {Message} message\n   */\n\n  this.onPublish = function (message) {\n    debug('on publish ', message.id());\n    self.exchange().publish(message);\n  };\n\n\n  /**\n   * Called when we receive a socket connection, this is bound to the\n   * socket.io instance\n   *\n   * @api private\n   * @param {Socket} socket\n   */\n\n  this.onConnection = function (socket) {\n\n    debug('on connection %s', socket.id);\n\n    function handle (message) {\n      debug('from excahnge pubsub %s, %s', message.id(), socket.id);\n      self.emit('from exchange pubsub', message, socket);\n    }\n\n    self.messages().actor(socket, function (err, actor) {\n      if (err) return self.emit('error', err);\n      // TODO this could be cleaned up using the alias and unalias methods\n      self.exchange().subscribe(actor, handle, function (err, channel) {\n        debug('subscribed to chanel %s with socket %s', actor, socket.id);\n        if (err) return self.emit('error', err);\n      });\n      socket.on('disconnect', function () {\n        self.exchange().unsubscribe(actor, handle, function (err, channel) {\n        debug('unsubscribed from chanel %s with socket %s', actor, socket.id);\n          if (err) return self.emit('error', err);\n        });\n      });\n    });\n\n  };\n\n  /**\n   * Called when we reeived a message from the Messages.  This is bound\n   * to the Messages instance.  It will then emit an event for the\n   * SocketReceiver instance to handle. This is when the Messages instance\n   * finishes createing the message and before the message is passed along to\n   * the Receiver for processing before dispatched to the Exchange.\n   *\n   * @api private\n   * @param {object} message\n   * @param {Socket} socket\n   * @see Messages\n   * @see Receiver\n   */\n\n  this.onMessage = function (message, socket) {\n    debug('on message from socket %s, %s', (message && message.data ? message.data.id : null), (socket ? socket.id : null));\n    if (message.data.action === '_flag') {\n      debug('flag set');\n      socket._flag = 1;\n      return socket.emit('_flag', 1);\n    }\n    self.emit('from socket', message, socket);\n  };\n\n  /**\n   * Called after we have received a message from the Exchange\n   *\n   * @api private\n   * @param {Message} message\n   * @param {Socket} socket\n   * @see Exchange\n   * @see Receiver\n   */\n\n  this.onReceivedPubSub = function (message, socket) {\n    debug('sending message %s to socket %s', (message && message.data ? message.data.id : null), (socket ? socket.id : null));\n    if (socket._flag) {\n      debug('flag set for bus.io-client');\n      socket.emit.apply(socket, [message.data.action, message]);\n    }\n    else {\n      debug('socket.io client');\n      socket.emit.apply(socket, [message.data.action, message.data.actor].concat(message.data.content).concat([message.data.target, message.data.created]));\n    }\n  };\n\n  /**\n   * Called after we have received a message from the socket.  This is after\n   * the SocketMessage instance creates a message and the Receiver instance\n   * processes it through the middleware.\n   *\n   * @api private\n   * @param {Message} message\n   * @param {Socket} socket\n   * @see Messages\n   * @see Receiver\n   */\n\n  this.onReceivedSocket = function (message, socket) {\n    debug('received a message %s from the socket %s ', (message && message.data ? message.data.id : null), (socket ? socket.id : null));\n    self.message(message).deliver();\n  };\n\n  /**\n   * Called when we receveie a message on the Queue\n   *\n   * @api private\n   * @param {object} message\n   * @see Exchange\n   */\n\n  this.onReceivedQueue = function (message) {\n    debug('received message %s from queue', message.id());\n    self.emit('from exchange queue', message);\n  };\n\n  /**\n   * Handles our error\n   *\n   * @api private\n   * @param {mixed} err\n   */\n\n  this.onError = function () {\n    debug('on error', arguments);\n    console.error.apply(console,Array.prototype.slice.call(arguments));\n  };\n\n  this.addListener('error', this.onError);\n\n  this.incomming();\n\n  this.processing();\n\n  this.outgoing();\n\n  this.autoPropagate(true);\n\n  if (a) {\n    debug('we have something so we will try to listen to it');\n    this.listen(a, b);\n  }\n}\n\nutil.inherits(Server, events.EventEmitter);\n\n/**\n * Listen on the port or socket.io instance\n *\n * @api public\n * @param {mixed} Either a number or a Socket.IO instance\n * @param {Object} Options\n * @return Server\n */\n\nServer.prototype.listen = function (a, b) {\n  var attach = function (server) {\n    if (!server) {\n      server = http.Server(function (req, res) {\n        res.writeHead(404);\n        res.end();\n      });\n    }\n    var handlers = server.listeners('request').slice(0);\n    server.removeAllListeners('request');\n    server.on('request', function (req, res) {\n      debug('on request %s', req.url);\n      if (0 === req.url.indexOf('/bus.io/bus.io.js')) {\n        try {\n\t\t\t\t\tvar etag = req.headers['if-none-match'];\n\t\t\t\t\tif (etag) {\n\t\t\t\t\t\tif (clientVersion === etag) {\n\t\t\t\t\t\t\tres.writeHead(304);\n\t\t\t\t\t\t\tres.end();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tres.setHeader('Content-Type', 'application/javascript');\n\t\t\t\t\t\tres.setHeader('ETag', clientVersion);\n\t\t\t\t\t\tres.writeHead(200);\n\t\t\t\t\t\tres.end(clientSource);\n\t\t\t\t\t}\n        }\n        catch(e) {\n          console.error(e);\n          console.log(e.stack);\n        }\n        return;\n      }\n      else {\n        debug('not what we are looking for');\n        for (var i = 0; i < handlers.length; i++) {\n          handlers[i].call(server, req, res);\n        }\n      }\n    });\n    return server;\n  };\n\n  if (a instanceof sio) {\n    debug('a socket.io instance');\n    console.warn('It is not recommended to pass in a Socket.IO Server instance.  If you need to manipulate the Socket.IO server instance please call bus.io() to get it');\n    a.attach(attach(), b);\n    this.io(a);\n  }\n  else if (!isNaN(a)) {\n    debug('a port number %s', a);\n    this.io(sio(attach().listen(Number(a)), b));\n  }\n  else if (a instanceof http.Server) {\n    debug('an http server instnace');\n    this.io(sio(attach(a), b));\n  }\n  else {\n    console.error('must pass in either an http.Server(), or a Number');\n  }\n\n  return this;\n};\n\n/**\n * Gets a builder for the passed data\n *\n * @api public\n * @param {object} data\n * @return Builder\n */\n\nServer.prototype.message = function (data) {\n  debug('new message with ', data);\n  var builder = Builder(data);\n  builder.on('built', this.onPublish);\n  return builder;\n};\n\n/**\n * Gets a builder for the passed data\n *\n * @api public\n * @see Server.prototype.message()\n * @param {object} data\n * @return Builder\n */\n\nServer.prototype.msg = Server.prototype.message;\n\n\n/**\n * Sets / Gets the Exchange\n *\n * @api public\n * @param {Exchange} exchange\n * @return Exchange / Server\n */\n\nServer.prototype.exchange = function (exchange) {\n\n  if (typeof exchange === 'object' && exchange instanceof Exchange) {\n    debug('setting the exchange');\n    \n    if (this._exchange) {\n      debug('we already have an exchange remove onReceivedQueue listener from the queue');\n      this._exchange.queue().removeListener('message', this.onReceivedQueue);\n    }\n\n    this._exchange = exchange;\n    this._exchange.queue().addListener('message', this.onReceivedQueue);\n    return this;\n  }\n\n  if (!this._exchange || (!(typeof this._exchange === 'object' && this._exchange instanceof Exchange))) {\n    debug('we do not have an exchange so create one');\n    this.exchange(Exchange());\n  }\n\n  return this._exchange;\n\n};\n\n/**\n * Sets / Gets Messages instance\n *\n * @api private\n * @param {Messages} io * optioanl\n * @return Messages / Server\n */\n\nServer.prototype.messages = function (messages) {\n  \n  if (typeof messages === 'object' && messages instanceof Messages) {\n\n    debug('setting messages obejct');\n\n    if (this._messages) {\n      debug('we already have instance so remove onMessage listener');\n      this._messages.removeListener('message', this.onMessage);\n    }\n\n    this._messages = messages;\n    this._messages.on('message', this.onMessage);\n    return this;\n\n  }\n\n  if (!this._messages || (!(typeof this._messages === 'object' && this._messages instanceof Messages) )) {\n    debug('we do not have a messages object so create one');\n    this.messages(Messages());\n  }\n\n  return this._messages;\n\n};\n\n/**\n * Sets / Gets Socket.IO instance\n *\n * @api public\n * @param {SocketIO} io * optioanl\n * @return SocketIO / Server\n */\n\nServer.prototype.io = function (io) {\n\n  if (typeof io === 'object') {\n\n    debug('setting the io object');\n\n    this._io = io;\n    this.messages().attach(this._io);\n    this._io.on('connection', this.onConnection);\n    return this;\n\n  }\n\n  if (!this._io) {\n    this.io(sio());\n  }\n  \n  return this._io;\n\n};\n\n/**\n * Sets up a handler for the exchange\n *\n * @api public\n * @see Recevier\n * @param {mixex} First item bust be a string or function\n * @return Server\n */\n\nServer.prototype.on = function () {\n  if (arguments.length >= 1 && typeof arguments[0] === 'string') {\n    debug('first item is a string so call messages action with %s', arguments[0]);\n    this.messages().action(arguments[0]);\n  }\n  debug('calling processing() use', arguments);\n  this.processing().use.apply(this.processing(), Array.prototype.slice.call(arguments));\n  return this;\n};\n\n/**\n * delegate\n *\n * @api public\n * @see Messages\n */\n\nServer.prototype.actor = function () {\n  debug('calling messages actor', arguments);\n  var o = this.messages();\n  o.actor.apply(o, Array.prototype.slice.call(arguments));\n  return this;\n};\n\n/**\n * delegate\n *\n * @api public\n * @see Messages\n */\n\nServer.prototype.target = function () {\n  debug('calling messages targt', arguments);\n  var o = this.messages();\n  o.target.apply(o, Array.prototype.slice.call(arguments));\n  return this;\n};\n\n/**\n * initialize the receiver.  it will handle messages comming from the socket\n * before it gets to the exchange\n *\n * @api private\n * @see Receiver\n * @return Server / Receiver\n */\n\nServer.prototype.incomming = function (o) {\n\n  if (typeof o === 'object' && o instanceof Receiver) {\n    debug('setting new receiver for incomming');\n    if (this._incomming) {\n      debug('we already have one, so remove listeners');\n      this.removeListener('from socket', this._incomming.onReceive);\n      this._incomming.removeListener('error', this.onError);\n      this._incomming.removeListener('received', this.onReceivedSocket);\n    }\n\n    this._incomming = o;\n    this._incomming.addListener('error', this.onError);\n    this._incomming.addListener('received', this.onReceivedSocket);\n    this.addListener('from socket', this._incomming.onReceive);\n\n    return this;\n  }\n\n  if (!this._incomming || (!(this._incomming instanceof Receiver))) {\n    debug('we do not have incomming receiver so setting it');\n    this.incomming(Receiver());\n  }\n\n  return this._incomming;\n\n};\n\n/**\n * initializes the receiver.  it will handle messages on the bus, this happens\n * after we get the message in from the socket, and before we send the message\n * to the socket.\n *\n * @api private\n * @see Receiver\n * @return Server / Receiver\n */\n\nServer.prototype.processing = function (o) {\n\n  if (typeof o === 'object' && o instanceof Receiver) {\n    debug('setting processing receiver');\n    if (this._processing) {\n      debug('we already have one remove listeners');\n      this.removeListener('from exchange queue', this._processing.onReceive);\n      this._processing.removeListener('error', this.onError);\n      this._processing.removeListener('received', this.onPublish);\n    }\n\n    this._processing = o;\n    this._processing.addListener('error', this.onError);\n    this._processing.addListener('received', this.onPublish);\n    this.addListener('from exchange queue', this._processing.onReceive);\n\n    return this;\n  }\n\n  if (!this._processing || (!(this._processing instanceof Receiver))) {\n    debug('we do not already have processing receiver set it');\n    this.processing(Receiver());\n  }\n\n  return this._processing;\n\n};\n\n/**\n * initialize the receiver.  it will handle messages comming from the exchange\n * before it gets to the socket\n *\n * @api private\n * @see Receiver\n * @param {Receiver} o\n * @return Server / Receiver\n */\n\nServer.prototype.outgoing = function (o) {\n\n  if (typeof o === 'object' && o instanceof Receiver) {\n    debug('setting outgoing receiver');\n    if (this._outgoing) {\n      debug('we already have one so remove lsiteners');\n      this.removeListener('from exchange pubsub', this._outgoing.onReceive);\n      this._outgoing.removeListener('error', this.onError);\n      this._outgoing.removeListener('received', this.onReceivedPubSub);\n    }\n\n    this._outgoing = o;\n    this._outgoing.addListener('error', this.onError);\n    this._outgoing.addListener('received', this.onReceivedPubSub);\n    this.addListener('from exchange pubsub', this._outgoing.onReceive);\n\n    return this;\n  }\n\n  if (!this._outgoing || (!(this._outgoing instanceof Receiver))) {\n    debug('we do not have outgoing receiver so setting it');\n    this.outgoing(Receiver());\n  }\n\n  return this._outgoing;\n\n};\n\n\n/**\n * Binds a method to the exchange receiver for processing the incomming \n * messages from the exchange before being dispatched to the socket.\n *\n * @api public\n * @see Receiver\n * @param {mixed} First item must be a string or Function\n * @return Server\n */\n\nServer.prototype.out = function () {\n  debug('calling outgoing use');\n  this.outgoing().use.apply(this.outgoing(), Array.prototype.slice.call(arguments));\n  return this;\n};\n\n/**\n * Binds a method to the socket receiver for processing the incomming\n * message received from the Messages before being dispatched to the \n * exchange.\n *\n * @api public\n * @see Receiver\n * @param {mixed} First item must be a string or Function\n * @return Server\n */\n\nServer.prototype.in = function () {\n  debug('calling incomming use');\n  this.incomming().use.apply(this.incomming(), Array.prototype.slice.call(arguments));\n  return this;\n};\n\n/**\n * Binds the method to socket.io's \"connection\" event\n *\n * @api public\n * @see socket.io\n * @param {function} fn\n * @return Server\n */\n\nServer.prototype.socket = function (fn) {\n  debug('calling io() on \\'connection\\'');\n  var self = this;\n  this.io().on('connection', function (socket) {\n    return fn(socket, self);\n  });\n  return this;\n};\n\n/**\n * sets up an alias for the actor / socket\n *\n * @api public\n * @param {Socket} socket\n * @param {string} name\n * @param {Function} done * optional\n * @return Server\n */\n\nServer.prototype.alias = function (socket, name, done) {\n  debug('aliasing a socket %s to the name %s', socket.id, name);\n\n  var self = this;\n  var handle = function (message) {\n    debug('[alias \"%s\"] from exchange pubsub message %s, socket %s', name, message.id(), socket.id);\n    self.emit('from exchange pubsub', message, socket);\n  };\n  handle.id = socket.id;\n\n  this.exchange().subscribe(name, handle, function (err, channel) {\n\n    if (err) return self.emit('error', err);\n\n    debug('[alias \"%s\"] subscribed  %s, socket %s', name, channel, socket.id);\n\n    socket.on('disconnect', function () {\n      self.exchange().unsubscribe(name, handle, function (err, channel) {\n        if (err) return self.emit('error', err);\n        debug('[alias \"%s\"] unsubscribed  %s, socket %s, listeners now %s', name, channel, socket.id, self.exchange().listeners('channel ' + name).length);\n      });\n    });\n\n    if (typeof done === 'function') {\n      done(err, channel);\n    }\n  });\n\n  return this;\n};\n\n/**\n * removes an alias for the actor / socket\n *\n * @api public\n * @param {Socket} socket\n * @param {string} name\n * @param {Function} done * optional\n * @return Server\n */\n\nServer.prototype.unalias = function (socket, name, done) {\n  debug('aliasing a socket %s to the name %s', socket.id, name);\n\n  var self = this;\n  \n  // TODO a hash would be better to store this information\n  var listeners = this.exchange().listeners('channel '+ name), handle = null;\n  debug('searching for the handler in these listeners %s', listeners.length);\n  for (var i=0; i<listeners.length; i++) {\n    if (listeners[i].id && listeners[i].id === socket.id) {\n      handle = listeners[i]; \n      break;\n    }\n  }\n\n  if (handle) {\n    debug('found handler');\n\n    debug('unsubscribing %s', name);\n    this.exchange().unsubscribe(name, handle, function (err, channel) {\n\n      if (err) return self.emit('error', err);\n\n      debug('[unalias \"%s\"] unsubscribed  %s, socket %s, listeners now %s', name, channel, socket.id, self.exchange().listeners('channel ' + name).length);\n\n      if (typeof done === 'function') {\n        done(err, channel);\n      }\n\n    });\n\n  }\n  else {\n    debug('did not find handler');\n    if (typeof done === 'function') {\n      done(null, name);\n    }\n  }\n\n  return this;\n};\n\n/**\n * delegates the call to queue\n *\n * @api public\n * @return Queue / Server\n */\n\nServer.prototype.queue = function (queue) {\n  if (typeof queue !== 'undefined') {\n    debug('attaching new queue, removing listener');\n    this.exchange().queue().removeListener('message', this.onReceivedQueue);\n    queue.addListener('message', this.onReceivedQueue);\n    this.exchange().queue(queue);\n    return this;\n  }\n  return this.exchange().queue();\n};\n\n/**\n * delegates the call to pubsub\n *\n * @api public\n * @return PubSub / Server\n */\n\nServer.prototype.pubsub = function (pubsub) {\n  if (typeof pubsub !== 'undefined') {\n    debug('attaching new pubsub');\n    this.exchange().pubsub(pubsub);\n    return this;\n  }\n  return this.exchange().pubsub();\n};\n\n/**\n * delegates the call to messages()\n *\n * @api public\n * @return Boolean / Server\n */\n\nServer.prototype.autoPropagate = function (v) {\n  debug('calling messages autoPropagate %s', v);\n  if (typeof v === 'boolean') {\n    this.messages().autoPropagate(v);\n    return this;\n  }\n  return this.messages().autoPropagate();\n};\n\n/**\n * Calls the passed method passing in our instance\n *\n * @api public\n * @param {Function} fn\n * @return Server\n */\n\nServer.prototype.use = function (fn) {\n  debug('calling passed method with us as an argument (middleware)');\n  fn(this);\n  return this;\n};\n\n/**\n * Sends the data to server in a message\n *\n * @api public\n * @param mixed\n * @return Server\n */\n\nServer.prototype.deliver = function () {\n  this.msg.apply(this, slice.call(arguments)).deliver();\n  return this;\n};\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io-common/index.js":"module.exports = require('./lib');\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io-common/lib/index.js":"exports.Message = require('./message');\nexports.Controller = require('./controller');\nexports.Builder = require('./builder');\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io-common/lib/message.js":"var extend = require('extend')\n  , debug = require('debug')('bus.io-common:message')\n  , uuid = require('node-uuid')\n  , slice = Array.prototype.slice\n  ;\n\nmodule.exports = Message;\n\n/**\n * A message represents an action performed by an actor on target with the content\n */\n\nfunction Message () {\n\n  if (!(this instanceof Message)) {\n    if (typeof arguments[0] === 'object' && arguments[0] instanceof Message) {\n      debug('message is a message so return it');\n      return arguments[0];\n    }\n    else {\n      debug('creating new message and initializing with arguments');\n      var m = new Message();\n      Message.prototype.initialize.apply(m, slice.call(arguments));\n      return m;\n    }\n  }\n  else {\n    this.isMessage = true;\n    if (arguments.length) {\n      debug('initializing with arguments');\n      Message.prototype.initialize.apply(this, slice.call(arguments));\n    }\n  }\n\n}\n\n/**\n * Initializes the message instance\n *\n * @param {string} a The actor\n * @param {string} b The action\n * @param {string} c The content\n * @param {string} d The target\n * @param {Date} e The created\n * @param {String} f id of the message\n * @param {string} g The referenced message id\n * @param {Date} h The date it was published\n */\n\nMessage.prototype.initialize = function (a, b, c, d, e, f, g, h) {\n  if (arguments.length === 1 && typeof a === 'object') {\n    debug('it is an object');\n    if (a instanceof Message) {\n      debug('it is a Message');\n      this.data = a.clone().data;\n    }\n    else if (a.isMessage) {\n      debug('the object is not an instance but has the flag');\n      extend(this, a);\n    }\n    else if (a.data) {\n      debug('it has some data we may be able to use');\n      this.data = a.data\n    }\n    else {\n      debug('just using it as the data');\n      this.data = a;\n    }\n  }\n  else {\n    debug('initializing with positional arguments and or defaults');\n    this.data = {};\n    this.data.actor = a || 'unknown';\n    this.data.action = b || 'unknown';\n    this.data.content = c || [];\n    this.data.target = d || 'unknown';\n    this.data.created = e || new Date();\n    this.data.id = f || uuid.v1();\n    this.data.reference = g;\n    this.data.published = h;\n  }\n\n  if (!this.data) {\n    debug('no data setting to empty object');\n    this.data = {};\n  }\n  \n  if (!this.data.created) {\n    debug('setting the created date');\n    this.data.created = new Date();\n  }\n\n  if (!this.data.id) {\n    debug('setting the id');\n    this.data.id = uuid.v1();\n  }\n\n  return this;\n};\n\n/**\n * Clones the message's data into a new message, however the id is now different\n *\n * @return Message\n */\n\nMessage.prototype.clone = function () {\n  var m = new Message(extend({}, this.data));\n  m.data.id = uuid.v1();\n  debug('cloned the message %d', m.data.id);\n  return m;\n};\n\n// set / get these functions\n\nMessage.prototype.actor = setOrGet('actor', 'unknown');\nMessage.prototype.action = setOrGet('action', 'unknown');\nMessage.prototype.target = setOrGet('target', 'unknown');\nMessage.prototype.content = setOrGet('content', function () { return []; }, function (a) { if (typeof a==='object' && a instanceof Array && a.length === 1) { return a[0]; } else { return a; }  });\nMessage.prototype.id = get('id', function () { return uuid.v1(); });\nMessage.prototype.created = get('created', function () { return new Date(); });\nMessage.prototype.reference = get('reference', null);\nMessage.prototype.published = get('published', false);\n\nfunction get (name, def, onGet) {\n  onGet = onGet || f;\n  return function () {\n    if (!this.data) {\n      this.data = {};\n    }\n    this.data[name] = this.data[name] || (typeof def === 'function' ? def() : def);\n    if (typeof this.data[name] === 'undefined') {\n      this.data[name] = (typeof def === 'function' ? def() : def);\n    }\n    return onGet(this.data[name]);\n  }\n}\n\nfunction set (name, onSet) {\n  onSet = onSet || f;\n  return function (v) {\n    if (!this.data) {\n      this.data = {};\n    }\n    this.data[name] = onSet(v);\n    return this;\n  }\n}\n\nfunction setOrGet (name, def, onGet, onSet) {\n  var g = get(name, def, onGet), s = set(name, onSet);\n  return function (v) {\n    var self = this;\n    if (v) {\n      return s.call(this, v);\n    }\n    return g.call(this);\n  }\n}\n\nfunction f (a) { return a; }\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io-common/lib/controller.js":"var util = require('util')\n  , events = require('events')\n  , debug = require('debug')('bus.io-common:controller')\n  , Message = require('./message')\n  , slice = Array.prototype.slice\n  ;\n\nmodule.exports = Controller;\n\n/**\n * When handling a message we use a controller\n *\n * @param {Message} message\n * @throws Error\n */\n\nfunction Controller (message) {\n\n  if (!(message instanceof Message)) throw new Error('message must be an instanceof Message');\n\n  if (!(this instanceof Controller)) return new Controller(message);\n\n  debug('new controller');\n\n  events.EventEmitter.call(this);\n\n  this.message = message;\n\n  this.data = this.message.data;\n\n}\n\nutil.inherits(Controller, events.EventEmitter);\n\n/**\n * Flags the message as consumed\n *\n * @return Controller\n */\n\nController.prototype.consume = function () {\n  debug('consuming message %s', this.message.id());\n  this.message.consumed = new Date();\n  this.emit('consume', this.message);\n  return this;\n};\n\n/**\n * Responds to the message with the given content\n *\n * @param {mixed} content\n * @return Controller\n */\n\nController.prototype.respond = function (content) {\n  debug('responding to message %s', this.message.id());\n  var message = this.message.clone();\n  debug('response message id %', message.id());\n  message.data.actor = this.message.target();\n  message.data.target = this.message.actor();\n  message.data.content = typeof content !== 'undefined' ? content : message.data.content;\n  message.data.created = new Date();\n  message.data.reference = this.message.id();\n\n  this.message.responded = new Date();\n  this.emit('respond', message);\n  return this;\n};\n\n/**\n * Delivers the message\n * \n * @return Controller\n */\n\nController.prototype.deliver = function () {\n  debug('delivering the message');\n  this.message.delivered = new Date();\n  if (arguments.length === 0) {\n    debug('to original target');\n    this.emit('deliver', this.message);\n  }\n  else if (arguments.length === 1) {\n    if (typeof arguments[0] === 'object' && arguments[0] instanceof Array) {\n      debug('to a list of targets');\n      deliverEach(this, arguments[0]);\n    }\n    else {\n      debug('to another target');\n      var message = this.message.clone();\n      message.data.target = String(arguments[0]);\n      this.emit('deliver', message);\n    }\n  }\n  else if (arguments.length > 1) {\n    debug('we have more than one arguments so deliver to each of them');\n    deliverEach(this, slice.call(arguments));\n  }\n  return this;\n};\n\n\n/**\n * This method is a conveince for setting the content and as well as triggering\n * the response, if we encounter an error.\n *\n * @param {mixed} content\n * @return Controller\n */\n\nController.prototype.errored = function (err) {\n  debug('responding with an error');\n  this.action(this.action() + ' errored').respond(err); \n  return this;\n};\n\n\n\n\n/**\n * set up delegates\n */\n\n'actor action target content id created reference published'.split(' ').forEach(function (name) {\n  Controller.prototype[name] = function () {\n    debug('delegating %s to the message instance', name);\n    var v = this.message[name].apply(this.message,slice.call(arguments));\n    if ('object' === typeof v && (v === this.message || v.isMessage)) {\n      return this;\n    }\n    else {\n      return v;\n    }\n  }\n});\n\nfunction deliverEach (controller, targets) {\n  targets.forEach(function (target) {\n    var message = controller.message.clone();\n    message.data.target = target;\n    controller.emit('deliver', message);\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io-common/lib/builder.js":"var util = require('util')\n  , events = require('events')\n  , debug = require('debug')('bus.io-common:builder')\n  , Message = require('./message')\n  , slice = Array.prototype.slice\n  ;\n\nmodule.exports = Builder;\n\n/**\n * Builds a Message instance and provides a way to deliver the built message\n *\n * @param {object} data\n */\n\nfunction Builder (data) {\n\n  if (!(this instanceof Builder)) return new Builder(data);\n\n  debug('new builder', data);\n\n  events.EventEmitter.call(this);\n\n  this.message = Message(data);\n\n}\n\nutil.inherits(Builder, events.EventEmitter);\n\n/**\n * set up delegates\n */\n\n'actor action target content id created reference published'.split(' ').forEach(function (name) {\n  Builder.prototype[name] = function () {\n    debug('delegating %s to the message instance', name);\n    var v = this.message[name].apply(this.message,slice.call(arguments));\n    if ('object' === typeof v && (v === this.message || v.isMessage)) {\n      return this;\n    }\n    else {\n      return v;\n    }\n  }\n});\n\n/**\n * Sets or gets the actor\n *\n * @param {mixed} actor\n * @return Object / Builder\n */\n\nBuilder.prototype.i = Builder.prototype.actor;\n\n/**\n * Sets or gets the action\n *\n * @param {mixed} action\n * @return Object / Builder\n */\n\nBuilder.prototype.did = Builder.prototype.action;\n\n/**\n * Sets or gets the content\n *\n * @param {mixed} content\n * @return Object / Builder\n */\n\nBuilder.prototype.what = Builder.prototype.content;\n\n/**\n * Sets or gets the data\n *\n * @return Object / Builder\n */\n\nBuilder.prototype.data = function (data) {\n\n  if (typeof data === 'object') {\n    this.message.data = data;\n  }\n  else {\n    return this.message.data;\n  }\n\n  return this;\n\n};\n\n/**\n * Delivers the message to each passed target\n *\n * @return Builder\n */\n\nBuilder.prototype.to = Builder.prototype.deliver = function () {\n\n  if (arguments.length > 0) {\n    this.target(String(arguments[0]));\n  }\n\n  if (this.target()) {\n    this.emit('built', this.message);\n  }\n\n  if (arguments.length > 1) {\n    var targets = slice.call(arguments);\n    for (var i=1; i<targets.length; i++) {\n      var message = this.message.clone();\n      message.target(String(targets[i]));\n      this.emit('built', message);\n    }\n  }\n\n  return this;\n\n};\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io-messages/index.js":"module.exports = require('./lib/messages');\n","/home/travis/build/npmtest/node-npmtest-bus.io/node_modules/bus.io-messages/lib/messages.js":"var util = require('util')\n  , events = require('events')\n  , debug = require('debug')('bus.io-messages:messages')\n  , common = require('bus.io-common')\n  , Message = common.Message\n  ;\n\nmodule.exports = Messages;\n\n/**\n * Produces and publishes socket messages\n */\n\nfunction Messages () {\n  var self = this;\n\n  if (!(this instanceof Messages)) return new Messages();\n\n  events.EventEmitter.call(this);\n\n  debug('new messages');\n\n  /**\n   * When a socket is accepted\n   *\n   * @param {object} socket\n   */\n\n  this.onConnection = function (socket) {\n\n    debug('on connection %s', socket.id);\n\n    /**\n     * This is used to add listeners to sockets when the Messages.prototype.action()\n     * method is invoked\n     *\n     * @param {string} name\n     */\n\n    function onAction (name) {\n      debug('on action %s', name);\n      if (socket.listeners(name).indexOf(self.onMessage) < 0) {\n        socket.on(name, function () {\n          debug('socket on %s', name);\n          var args = Array.prototype.slice.call(arguments);\n          self.onMessage(socket, [name].concat(args));\n        });\n      }\n    }\n   \n    self.on('action', onAction);\n\n    /*\n     * take the current actions and set up handlers for them\n     */\n\n    if (self.actions()) {\n      self.actions().forEach(onAction);\n    }\n\n\n    /*\n     * when we disconnect we want to remove the handlers and the onAction\n     * method\n     */\n\n    socket.on('disconnect', function () {\n      debug('on disconnect %s', socket.id);\n      self.removeListener('action', onAction);\n      self.actions().forEach(function (name) {\n        debug('removing listeners for %s', name);\n        socket.removeAllListeners(name);\n        debug('listener count %s for %s', socket.listeners(name).length, name);\n      });\n    });\n\n  };\n\n  /*\n   * Called when we receive data from the socket\n   * It will build up the actor, target, and content\n   * to produce a json object that will be published\n   * onto an publisher / event emitter\n   */\n\n  this.onMessage = function (socket, args) {\n    debug('on message %s', socket.id);\n    args = args || [];\n    if (!args.length) return;\n    var message, isMessage = false;\n    if (args.length === 2 && args[1] && args[1].isMessage) {\n      isMessage = true;\n      message = Message(args[1]);  \n    }\n    else {\n      message = Message();\n    }\n    message.action(args.shift());\n    self.actor(socket, function (err, actor) {\n      debug('on actor %s, %s', socket.id, actor);\n      if (err) {\n        return self.emit('error', err, socket, args);\n      }\n      message.actor(actor);\n      self.target(socket, args, function (err, target) {\n        debug('on target %s, %s', socket.id, actor);\n        if (err) {\n          return self.emit('error', err, socket, args);\n        }\n        message.target(target);\n        if (!isMessage) message.content(args);\n        self.emit('message', message, socket);\n      });\n    });\n  };\n\n  /*\n   * the middleware fucntion we attach to socket.io. It looks for events and if\n   * we have auto propagation turned on it will trigger events that are *not*\n   * in the current action set.\n   */\n\n  this.middleware = function (socket, next) {\n    debug('middleware invoked on socket %s', socket.id);\n    socket.onevent = self.onSocketEvent;\n    next();\n  };\n\n  /*\n   * The function we override the onevent with.\n   */\n\n  // TODO lets use socket.io-events\n\n  this.onSocketEvent = function(packet) {\n    debug('on socket event for socket %s', this.id);\n    var args = packet.data || [];\n\n    if (null != packet.id) {\n      args.push(this.ack(packet.id));\n    }\n\n    if (this.listeners(args[0]).length) {\n      events.EventEmitter.prototype.emit.apply(this, args);\n    }\n    else if (self.autoPropagate()) {\n      self.onMessage(this, args);\n    }\n\n  };\n\n  this.setMaxListeners(0);\n}\n\nutil.inherits(Messages, events.EventEmitter);\n\n/**\n * @api public\n * @return Messages\n */\n\nMessages.make = function () {\n  debug('make');\n  return new Messages();\n};\n\n/**\n * Creates a new instance and has it listen to \"io\"\n *\n * @api public\n * @param {object} io\n * @return Messages\n */\n\nMessages.listen = function (io) {\n  debug('listen');\n  var messages = this.make();\n  messages.attach(io);\n  return messages;\n};\n\n/**\n * Attaches our #onConnection method to the io object\n *\n * @api public\n * @param {object} io\n * @return Messages\n */\n\nMessages.prototype.attach = function (io) {\n  debug('attach');\n  if (io.sockets.fns.indexOf(this.middleware) < 0) {\n    io.use(this.middleware);\n  }\n  io.on('connection', this.onConnection);\n  return this;\n};\n\n/**\n * Either sets the actor query method or invokes it\n *\n * Set\n *\n * @api public\n * @param {Function} o\n *\n * Invoke\n *\n * @param {Object} o The socket\n * @param {Function} cb\n *\n * @return Messages\n */\n\nMessages.prototype.actor = function (o, cb) {\n  debug('actor');\n  var type = typeof o;  \n  if (arguments.length === 0) {\n    if (!this._actor) {\n      this._actor = function (socket, cb) {\n        if (typeof cb === 'function') {\n          cb(null, socket.id);\n        }\n      };\n    }\n    return this._actor;\n  }\n  else if (arguments.length === 1) {\n    if (type === 'undefined' || !o) {\n      return this;\n    }\n    if (type === 'function') {\n      this._actor = o\n    }\n  }\n  else if (arguments.length > 1) {\n    if (type !== 'function') {\n      if (!this._actor) {\n        this._actor = function (socket, cb) {\n          if (typeof cb === 'function') {\n            cb(null, socket.id);\n          }\n        };\n      }\n      this._actor(o, cb);\n    }\n  }\n  return this;\n};\n\n/**\n * Either sets the target query method or invokes it\n *\n * Set\n *\n * @api public\n * @param {Function} o\n *\n * Invoke\n *\n * @param {Object} o The socket\n * @param {Array} p The arguments emitted from the socket\n * @param {Function} cb\n *\n * @return Messages\n */\n\nMessages.prototype.target = function (o, p, cb) {\n  debug('target');\n  var type = typeof o;  \n  if (arguments.length === 0) {\n    if (!this._target) {\n      this._target = function (socket, params, cb) {\n        if (typeof cb === 'function') {\n          cb(null, socket.id);\n        }\n      };\n    }\n    return this._target;\n  }\n  else if (arguments.length === 1) {\n    if (type === 'undefined' || !o) {\n      return this;\n    }\n    if (type === 'function') {\n      this._target = o\n    }\n  }\n  else if (arguments.length > 2) {\n    if (type !== 'function') {\n      if (!this._target) {\n        this._target = function (sock, params, cb) {\n          if (typeof cb === 'function') {\n            if (params[0] && params[0].isMessage) {\n              cb(null, params[0].target || sock.id);\n            }\n            else {\n              cb(null, sock.id);\n            }\n          }\n        };\n      }\n      this._target(o, p, cb);\n    }\n  }\n  return this;\n};\n\n/**\n * Triggers the binding of an event handler to all sockets for the given event name\n *\n * @api public\n * @param {string} name\n * @return Messages\n */\n\nMessages.prototype.action = function (name) {\n  if (typeof name === 'string' && this.actions().indexOf(name) < 0) {\n    debug('add action %s', name);\n    this.actions().push(name)\n    this.emit('action', name);\n  }\n  return this;\n};\n\n/**\n * initializes the actions we have set so fare\n *\n * @api public\n * @return Array\n */\n\nMessages.prototype.actions = function () {\n  if (!this._actions) {\n    this._actions = [];\n  }\n  return this._actions;\n};\n\n/**\n * Gets / Sets the state of auto propagation\n *\n * @api public\n * @return Boolean\n */\n\nMessages.prototype.autoPropagate = function (v) {\n  debug('autoPropagate %s', v);\n  if (typeof v === 'boolean') {\n    this._autoPropagate = v;\n    return this;\n  }\n  if (typeof this._autoPropagate !== 'boolean') {\n    this.autoPropagate(false);\n  }\n  return this._autoPropagate;\n};\n\n"}